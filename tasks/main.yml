---
- name: Ensure dependencies are present.
  apt:
    name:
      - apt-transport-https
      - gnupg2
    state: present

- name: Remove old key and source
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /usr/share/keyrings/nodesource.gpg
    - /etc/apt/sources.list.d/nodesource.list

- name: Download NodeSource's signing key.
  get_url:
    url: https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key
    dest: /etc/apt/signing-key-nodesource-repo.asc
    owner: root
    group: root
    mode: '0444'
    force: true

- name: Add NodeSource repositories for Node.js.
  apt_repository:
    filename: "node_{{ nodejs_version }}"
    repo: "deb [arch=amd64 signed-by=/etc/apt/signing-key-nodesource-repo.asc] https://deb.nodesource.com/node_{{ nodejs_version }} nodistro main"
    state: present
  register: node_repo

- name: Create sources file
  blockinfile:
    path: /etc/apt/preferences.d/nodejs
    create: true
    owner: root
    group: root
    mode: '0444'
    block: |
      Package: nodejs
      Pin: origin deb.nodesource.com
      Pin-Priority: 600

- name: Update apt cache if repo was added.
  apt: update_cache=yes
  when: node_repo.changed
  tags: ['skip_ansible_lint']

- name: Ensure Node.js and npm are installed.
  apt:
    name: "nodejs={{ nodejs_version|regex_replace('x', '') }}*"
    state: present

- name: Define nodejs_install_npm_user
  set_fact:
    nodejs_install_npm_user: "{{ ansible_user | default(lookup('env', 'USER')) }}"
  when: nodejs_install_npm_user is not defined

- name: Create npm global directory
  file:
    path: "{{ npm_config_prefix }}"
    owner: "{{ nodejs_install_npm_user }}"
    group: "{{ nodejs_install_npm_user }}"
    state: directory
    mode: 0755

- name: Add npm_config_prefix bin directory to global $PATH.
  template:
    src: npm.sh.j2
    dest: /etc/profile.d/npm.sh
    mode: 0644
  when: nodejs_generate_etc_profile

- name: Ensure npm global packages are installed.
  npm:
    name: "{{ item.name | default(item) }}"
    version: "{{ item.version | default('latest') }}"
    global: true
    state: latest
  environment:
    NPM_CONFIG_PREFIX: "{{ npm_config_prefix }}"
    NODE_PATH: "{{ npm_config_prefix }}/lib/node_modules"
    NPM_CONFIG_UNSAFE_PERM: "{{ npm_config_unsafe_perm }}"
  with_items: "{{ nodejs_npm_global_packages }}"
  tags: ['skip_ansible_lint']

- name: Install packages defined in a given package.json.
  npm:
    path: "{{ nodejs_package_json_path }}"
  when: nodejs_package_json_path is defined and nodejs_package_json_path
